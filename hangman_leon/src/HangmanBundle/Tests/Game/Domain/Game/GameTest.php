<?php
/**
 * Created by PhpStorm.
 * User: lennard
 * Date: 14-1-16
 * Time: 16:09
 */

namespace HangmanBundle\Tests\Game\Domain\Game;

use Broadway\EventSourcing\Testing\AggregateRootScenarioTestCase;
use Broadway\UuidGenerator\Rfc4122\Version4Generator;
use HangmanBundle\Game\Domain\Game\Game;
use HangmanBundle\Game\Domain\Game\GameStarted;
use HangmanBundle\Game\Domain\Game\GameWon;
use HangmanBundle\Game\Domain\Game\LetterGuessedCorrectly;
use HangmanBundle\Game\Domain\Game\WrongLetterGuessed;

class GameTests extends AggregateRootScenarioTestCase
{
    /**
     * @var Version4Generator
     */
    private $generator;

    public function setUp()
    {
        $this->generator = new Version4Generator();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function getAggregateRootClass()
    {
        return Game::class;
    }

    /**
     * @test
     */
    public function it_can_start_a_game()
    {
        $id = $this->generator->generate();

        $this->scenario
            ->when(function() use ($id) {
                return Game::gameStart($id,"puppy");
            })
            ->then([new GameStarted($id, "puppy", new \DateTime("now"))]);
    }

    /**
     * @test
     */
    public function it_can_guess_a_wrong_letter()
    {
        $id = $this->generator->generate();

        $this->scenario
            ->withAggregateId($id)
            ->given([new GameStarted($id, "puppy", new \DateTime("now"))])
            ->when(function ($game) use ($id) {
                $game->chooseLetter($id, 'o');
            })
            ->then([
                new WrongLetterGuessed($id, 'o')
            ]);
    }

    /**
     * @test
     */
    public function it_can_guess_a_good_letter()
    {
        $id = $this->generator->generate();

        $this->scenario
            ->withAggregateId($id)
            ->given([new GameStarted($id, "puppy", new \DateTime("now"))])
            ->when(function ($game) use ($id) {
                $game->chooseLetter($id, 'p');
            })
            ->then([new LetterGuessedCorrectly($id, 'p')]);
    }

    /**
     * @test
     */
    public function it_can_win_a_game()
    {
        $id = $this->generator->generate();

        $this->scenario
            ->withAggregateId($id)
            ->given([
                new GameStarted($id, "lol", new \DateTime("now")),
                new LetterGuessedCorrectly($id, 'l')
            ])
            ->when(function ($game) use ($id) {
              //  $game->chooseLetter($id, 'l');
                $game->chooseLetter($id, 'o');
            })
            ->then([
                new LetterGuessedCorrectly($id, 'o'),
                new GameWon($id, new \DateTime("now"))
            ]);
    }
}