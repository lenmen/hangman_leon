<?php
/**
 * Created by PhpStorm.
 * User: lennard
 * Date: 15-1-16
 * Time: 11:52
 */

namespace HangmanBundle\Tests\ReadModel;


use Broadway\ReadModel\InMemory\InMemoryRepository;
use Broadway\ReadModel\Projector;
use Broadway\ReadModel\Testing\ProjectorScenarioTestCase;
use Broadway\UuidGenerator\Rfc4122\Version4Generator;
use HangmanBundle\Game\Domain\Game\GameStarted;
use HangmanBundle\Game\Domain\Game\LetterGuessedCorrectly;
use HangmanBundle\Game\ReadModel\GameStatics;
use HangmanBundle\Game\ReadModel\GameStaticsProjector;

class GameStaticsProjectorTest extends ProjectorScenarioTestCase
{
    /**
     * @var Version4Generator
     */
    private $generator;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->generator = new Version4Generator();
    }

    /**
     * @param InMemoryRepository $repository
     * @return GameStaticsProjector
     */
    protected function createProjector(InMemoryRepository $repository)
    {
        return new GameStaticsProjector($repository);
    }

    /**
     * @param string $gameId
     * @param string $word
     * @param \DateTime $datetime
     * @return GameStatics
     */
    private function createReadModel($gameId, $word, $datetime)
    {
        $readModel = new GameStatics($gameId, $word, $datetime);

        return $readModel;
    }

    /**
     * @param string $gameId
     * @param string $word
     * @param \DateTime $datetime
     * @param int $type
     * @param string $letter
     * @return GameStatics
     */
    private function applyLetterWithReadModel($gameId, $word, $datetime, $type, $letter)
    {
        $readModel = $this->createReadModel($gameId, $word, $datetime);

        switch($type) {
            case 0:
                // good guess
                $readModel = $readModel->setLetterCorrectlyGuessed($letter);
                break;
            case 1:
                $readModel = $readModel->setLetterWrongGuessed($letter);
                break;
        }

        return $readModel;
    }

    /**
     * @test
     */
    public function can_create_read_model()
    {
        $gameId = $this->generator->generate();
        $dateTime = new \DateTime("now");

        $game = new GameStarted($gameId, 'testcase', $dateTime);

        $this->scenario
            ->given([])
            ->when($game)
            ->then([
                $this->createReadModel($gameId, 'testcase',$dateTime)
            ]);
    }

    /**
     * @test
     */
    public function it_can_set_a_correct_letter()
    {
        $gameId = $this->generator->generate();
        $datetime = new \DateTime("now");

        $this->scenario
            ->withAggregateId($gameId)
            ->given([new GameStarted($gameId, "testsuite", $datetime)])
            ->when(new LetterGuessedCorrectly($gameId, 't'))
            ->then([$this->applyLetterWithReadModel($gameId, "testsuite", $datetime, 0, 't')]);
    }

    /**
     * @test
     */
    public function it_can_set_a_wrong_letter()
    {
        $gameId = $this->generator->generate();
        $dateTime = new \DateTime("now");

        $this->scenario
            ->given([new GameStarted($gameId, "testsuite", $dateTime)])
            ->when(new LetterGuessedCorrectly($gameId, 'p'))
            ->then([$this->applyLetterWithReadModel($gameId, "testsuite", $dateTime, 1, 'p')]);
    }
}